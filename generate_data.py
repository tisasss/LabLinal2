import numpy as np
import pandas as pd
import random

NUM_SAMPLES = 1_000_000
TRAIN_PART = 0.8
random.seed(42)
np.random.seed(42)

FEATURE_CONFIG = [
    ('Возраст', -0.1),
    ('Доход_в_месяц', -0.4),
    ('Расходы_в_месяц', 0.3),
    ('Кредитная_история_просрочки', 0.5),
    ('Сумма_текущего_кредита', 0.4),
    ('Количество_кредитов', 0.3),
    ('Долг_к_доходу', 0.45),
    ('Стаж_на_работе', -0.2),
    ('Общий_трудовой_стаж', -0.15),
    ('Уровень_образования', -0.2),
    ('Количество_детей', 0.1),
    ('В_браке', -0.1),
    ('Наличие_автомобиля', -0.05),
    ('Тип_жилья', -0.1),
    ('Наличие_вкладов', -0.15),
    ('Страхование_жизни', -0.1),
    ('Количество_судимостей', 0.3),
    ('Наличие_иждивенцев', 0.2),
    ('Частота_смены_работы', 0.15),
    ('Другие_займы', 0.3),
    ('Наличие_загранпаспорта', -0.05),
    ('Поездки_за_границу', -0.1),
    ('Дополнительная_недвижимость', -0.15),
    ('Стоимость_имущества', -0.2),
    ('Финансовая_грамотность', -0.25),
    ('Платеж_по_кредиту', 0.3),
    ('Пол_Мужчина', 0.05),
    ('Пол_Женщина', -0.05),
    ('Тип_занятости', -0.1),
    ('Шумовой_признак', 0.01),
]

FEATURE_DISTRIBUTIONS = [
    ('Возраст', 40, 10, 18, 80), #ср знач, станд отклонение, мин знач, макс знач
    ('Доход_в_месяц', 50000, 20000, 10000, 200000),
    ('Расходы_в_месяц', 30000, 15000, 5000, 100000),
    ('Кредитная_история_просрочки', 2, 2, 0, 10),
    ('Сумма_текущего_кредита', 20000, 15000, 1000, 100000),
    ('Количество_кредитов', 2, 1.5, 0, 10),
    ('Долг_к_доходу', 0.4, 0.2, 0, 1),
    ('Стаж_на_работе', 5, 3, 0, 20),
    ('Общий_трудовой_стаж', 15, 10, 0, 40),
    ('Уровень_образования', 3, 1.5, 0, 7),
    ('Количество_детей', 2, 1, 0, 5),
    ('В_браке', 0.5, 0.3, 0, 1),
    ('Наличие_автомобиля', 0.5, 0.3, 0, 1),
    ('Тип_жилья', 1, 0.7, 0, 2),
    ('Наличие_вкладов', 0.3, 0.2, 0, 1),
    ('Страхование_жизни', 0.2, 0.2, 0, 1),
    ('Количество_судимостей', 0.5, 0.5, 0, 5),
    ('Наличие_иждивенцев', 1, 1, 0, 5),
    ('Частота_смены_работы', 2, 1, 0, 5),
    ('Другие_займы', 1, 1, 0, 5),
    ('Наличие_загранпаспорта', 0.4, 0.3, 0, 1),
    ('Поездки_за_границу', 2, 2, 0, 10),
    ('Дополнительная_недвижимость', 0.5, 0.5, 0, 3),
    ('Стоимость_имущества', 50000, 30000, 0, 200000),
    ('Финансовая_грамотность', 1, 0.7, 0, 2),
    ('Платеж_по_кредиту', 5000, 3000, 0, 20000),
    ('Пол_Мужчина', 0.5, 0.3, 0, 1),
    ('Пол_Женщина', 0.5, 0.3, 0, 1),
    ('Тип_занятости', 2, 1, 0, 4),
    ('Шумовой_признак', 0, 1, -5, 5),
]


def generate_sample():
    sample = []
    for _, mu, sigma, min_val, max_val in FEATURE_DISTRIBUTIONS:
        val = random.gauss(mu, sigma)
        val = max(min_val, min(max_val, val))
        val = round(val, 2)
        sample.append(val)

    if sample[26] > 0.5:  # Пол_Мужчина
        sample[26] = 1
        sample[27] = 0
    else:
        sample[26] = 0
        sample[27] = 1

    return sample


# Генерация данных
data = {name: [] for name, _ in FEATURE_CONFIG}
data['default'] = []
for _ in range(NUM_SAMPLES):
    sample = generate_sample()
    for i, (name, _) in enumerate(FEATURE_CONFIG):
        data[name].append(sample[i])

    score = sum(data[name][-1] * weight for name, weight in FEATURE_CONFIG)
    data['default'].append(score)

df = pd.DataFrame(data)

threshold = df['default'].mean() * 1.8 #порог
df['default'] = (df['default'] < threshold).astype(int)

print(f"Размер данных: {df.shape}")
print(f"Доля дефолтов: {df['default'].mean():.4f}")
print("Средние значения признаков:", df.drop(columns=['default']).mean().values)
print("Стандартные отклонения признаков:", df.drop(columns=['default']).std().values)

df.to_csv('data.csv', index=False)
print("Данные сохранены в 'data.csv'")